"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var t=e(require("postcss-selector-parser"));function n(e){const t=e.parent,n=t.index(e);return n&&t.cloneBefore().removeAll().append(t.nodes.slice(0,n)),t.before(e),t}function r(e){e.nodes.length||e.remove()}function o(e,t){if(t<2)throw new Error("n must be greater than 1");if(e.length<2)throw new Error("s must be greater than 1");if(Math.pow(e.length,t)>1e4)throw new Error("Too many combinations when trying to resolve a nested selector with lists, reduce the complexity of your selectors");const n=[];for(let e=0;e<t;e++)n[e]=0;const r=[];for(;;){const o=[];for(let s=t-1;s>=0;s--){let t=n[s];if(t>=e.length){if(t=0,n[s]=0,0===s)return r;n[s-1]+=1}o[s]=e[t]}r.push(o),n[n.length-1]++}}const s=t.default.pseudo({value:":is"});function a(e){const t=e.nodes.filter((e=>"tag"===e.type));t.length>1&&t.slice(1).forEach((e=>{const t=s.clone();e.replaceWith(t),t.append(e)}))}function c(e,n){let r=[],o=!1;const s=[...e.nodes];for(let e=0;e<s.length+1;e++){const c=s[e];if(c&&"combinator"!==c.type)"nesting"===c.type&&(o=!0),r.push(c);else{if(o